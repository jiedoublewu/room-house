<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>任务八：JavaScript和树</title>
	
	<style >
    div
    {
    	display: flex;
    	display: -webkit-flex;
    	display: -moz-flex;
    	border:1px solid black;
    	padding: 10px;
    	margin: 10px;
    }
    
    .now{
    	background-color: lightgreen;
    }


	</style>
</head>
<body>
	<div class="super">Super
		<div class="cat">
			Cat
			<div class="apple">Apple
				<div class="pear">Pear</div>
				<div class="pig">Pig</div>
				<div class="cola">Cola</div>
				<div class="scoccer">Scoccer</div>
			</div>
			<div class="phone">Phone</div>
			<div class="blank">
				<div class="book">Book</div>
				<div class="school">School</div>
			</div>
		</div>
		<div class="note">Note
			<div class="human">Human
				<div class="code">Code</div>
				<div class="operate">Operate</div>
				<div class="man">Man</div>
			</div>
			<div class="program">Program
				<div class="bement">Bement
					<div class="cot">Cot</div>
				</div>
				<div class="gloss">Gloss</div>
			</div>
		</div>
		<div class="fish">Fish</div>
	</div>
	<input type="text" id="add-content">
	<button id="add-btn">添加</button>
	<button id="del-btn">删除</button>
	<input type="text" id="search-content">
	<button id="search">查询</button>
	<script>
   (function()
   	{

   		// 创建节点类
        function Node(data)
        {
        	this.data=data;
        	this.parent=null;
        	this.children=data.children;
        }

       
        // 创建树类
        function Tree(data)
        {
        	
        	this._root=data;
        }
        

        // 树的原型广度遍历方法
        Tree.prototype.traverseBF=function(callback)
        {
        	var queue=new Array();
        	queue.unshift(this._root);
        	currentNode=queue.pop();
        	while(currentNode)
        	{
                 for(var i=0;i<currentNode.children.length;i++)
                 {
                 	queue.unshift(currentNode.children[i]);
                 }
                 callback(currentNode);
                 currentNode=queue.pop();
        	}
        }
       

        // 是否含有该元素的查询方法
        Tree.prototype.contains=function(traverse,callback)
        {
            traverse.call(this,callback);
        }

        // 遍历过程中的颜色显示方法
       function paint(arr)
       {
             for(var i=0;i<arr.length;i++)
             {
                   arr[i].style.backgroundColor="white";
             }
       }
       

        // 添加元素模块方法
       Tree.prototype.add=function(newNode,toNode,traverse,content)
       { 
       	  var child=document.createElement(newNode);
       	  var parent=null;
       	  child.innerText=content;
       	  child.style.backgroundColor="white";
       	  var callback=function(node)
       	  {
              if(node.innerText==toNode.innerText)
              {
              	parent=node;
              }
       	  }

       	  this.contains(traverse,callback);
       	  if(parent)
       	  {
              parent.appendChild(child);
       	  }else
       	  {
       	  	throw new Error("Can't add node to a non-existent parent");
       	  }

       }

        function init()
        {
        	 var root=document.querySelector(".super");
             var tree=new Tree(root);
             var arr=[];
             var icon=null;//用来标记点击的元素
             var addBtn=document.querySelector("#add-btn");
             var delBtn=document.querySelector("#del-btn");
             var search=document.querySelector("#search");
             var addContent=document.querySelector("#add-content");
             var searchContent=document.querySelector("#search-content");

             

             // 委托代理模式，点击树中的某个模块，返回该元素
             root.addEventListener("click",function(e)
             	{
                    var arr=[];
                    tree.traverseBF(function(node)
                    	{
                    		arr.push(node);
                    	});
                    arr.shift();
                    arr.unshift(this);
             		for(var i=0;i<arr.length;i++)
             		{
             			arr[i].style.backgroundColor="white";
             		}
                     e.target.style.backgroundColor="lightgreen";
                     icon=e.target;
             	});

             // 增加按钮响应事件，在点击的元素中增加子元素
             addBtn.addEventListener("click",function()
             	{
             		var inputContent=addContent.value.trim();
             		tree.add("div",icon,tree.traverseBF,inputContent);
             	});

             // 删除按钮响应事件，删除点击的元素及其子元素
             delBtn.addEventListener("click",function(e)
             	{
                    if(!icon)
                    {
                    	alert("请选择要删除的元素");
                    }
                    else
                    {
                    	icon.remove();
                    }
                    
             	});

             // 查询按钮响应事件，查询相关内容的元素
             search.addEventListener("click",function()
             	{
             		var destination=null;
             		var inputContent=searchContent.value.trim();
             		tree.contains(tree.traverseBF,function(node)
             			{
                              if(inputContent.match(node.innerText))
                              {
                              	destination=node;
                              }
             			});
             		
             		var arr=[];
                    tree.traverseBF(function(node)
                    	{
                    		arr.push(node);
                    	});
                      arr.shift();
                      arr.unshift(root);
                      var i=0;
		      	     var interval=setInterval(function()
		      	     	{
		                   paint(arr);
		                   arr[i].style.backgroundColor="blue";
		                   if(arr[i]==destination)
		                   {
		                   	destination.style.backgroundColor="lightblue";
		                   	clearInterval(interval);
		                   }
		                   i++;
		                   if(i==arr.length)
		                   {
		                   	    alert("查不到该元素");
		                   		clearInterval(interval);
		                   }
		      	     	},30);	
             	});
        }
       init();
   	})();


	</script>

</body>
</html>
